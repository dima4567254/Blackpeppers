/*$Butler: 'Butler',
sans-serif;*/

$active: #fb0909;
$focus:#14B4BE;
$hover:#C39F76;
$brown: #c29e75;
$brown2:#d2ab73;
// brown

$ac: #fcd7b6;

$white: #FFFFFF;
$black: #000000;
$black1: #1d1d1d;
$black3:#262626;
$title: #436372;
$btn-menu:silver;
$silver :#888888;
$dotted: #999;
$mobile-contact: #ACACAC;

//section
$padding-main:120px;//40
$padding-1200:100px;
$padding-992:80px; //70
$padding-768:65px; //50
$padding-576:65px;

// @mixin line-clamp-box($line-clamp, ) {
//     display: -webkit-box;
//     -webkit-line-clamp: $line-clamp;
//     -webkit-box-orient: vertical;
//     overflow: hidden;
// }

// @mixin line-clamp-inline($line-clamp, ) {
//     display: -webkit-inline-flex;
//     -webkit-line-clamp: $line-clamp;
//     -webkit-box-orient: vertical;
//     overflow: hidden;
// }

// @mixin line-clamp-one($max-width, ) {
//     white-space: nowrap;
//     overflow: hidden;
//     text-overflow: ellipsis;
//     display: block;
//     max-width: $max-width;
// }

// @mixin line-height($font-size, $line-height, ) {
//     line-height: ($line-height / $font-size)
// }


// @mixin clamp($font-size,
//     $line-height,
//     $lines-to-show) {
//     // display: block; // Fallback for non-webkit browsers
//     display: -webkit-box;
//     font-size: rem($font-size);
//     max-height: rem(($font-size * $line-height * $lines-to-show)); // Fallback for non-webkit browsers
//     line-height: $line-height;
//     overflow: hidden;
//     text-overflow: ellipsis;
//     -webkit-box-orient: vertical;
//     -webkit-line-clamp: $lines-to-show;
// }

// @mixin line-clamp($line-clamp, ) {
//     display: -webkit-box;
//     -webkit-line-clamp: $line-clamp;
//     -webkit-box-orient: vertical;
//     overflow: hidden;
    
// }

// @mixin line-height($font-size, $line-height, ) {

//     line-height: ( $line-height / $font-size)
// }
/*
@include clamp(5);
*/

// $browser-context: 16;

// @function em($pixels, $context: $browser-context) {
//   @if (unitless($pixels)) {
//     $pixels: $pixels * 1px;
//   }

//   @if (unitless($context)) {
//     $context: $context * 1px;
//   }

//   @return $pixels / $context * 1em;
// }
